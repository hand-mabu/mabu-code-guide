{"title":"MABU 代码规范","date":"2019-03-12T04:51:12.606Z","url":"/mabu-code-guide/index.html","content":""},{"title":"第三方服务","date":"2019-03-12T04:54:40.919Z","url":"/mabu-code-guide//service/index.html","content":"评论系统「Suka」支持多达 8 种的评论系统，它们分别是 DISQUS（支持三种使用方式）、搜狐畅言、来必力、Gitment、Gitalk、Valine、WildFire 和 Facebook Comment。它们分别对应的键值是 disqus disqusjs disqus_proxy changyan livere gitment gitalk valine wildfire，将你想启用的评论系统的键值填写在 use 中，然后找到对应评论系统的配置位置。DISQUS「Suka」提供中了三种使用 Disqus 的方式。常规模式文章页面将会直接加载 Disqus。comment:  use: disqus  disqus:    shortname: # 你的 Disqus shortname如果你不知道你的 shortname 是什么，请访问 Disqus 中你的站点的管理后台，此时你浏览器地址栏中的域名应形如是 example.disqus.com，example 就是你的 shortname。Click 模式这个模式下，浏览器会通过 AJAX 的方式测试 Disqus 能否连通。如果能连通则自动加载 Disqus，如果不能则会显示一个按钮 阅读评论（请确保 disqus 可以正常加载），点击该按钮以后会再次加载 Disqus。这项设置有助于大大改善在 公开、平等、有序 的 网络审查 地区 下的浏览者的体验。comment:  use: disqus_click  disqus:    shortname: # 你的 Disqus shortnameDisqusJS这个模式下，需要用户配置一个  的反向代理，在评论基本模式中使用反代 API 获取评论内容（但是基本模式下仍然不能发表评论）。同时提供一个按钮切换到 Disqus 完整模式下以发表评论。这项设置有助于在 公开、平等、有序 的 网络审查 地区 下的浏览者正常阅读评论内容。comment:  use: disqusjs  ......  disqusjs:    shortname:    siteName:    api:    apikey:    admin:    adminLabel:具体配置请阅读 搜狐畅言:  use: changyan  ......  changyan:    appid: # 畅言的 APPID    conf: # 畅言的 CONF    thread_key_type: path # 可选 id 或 path在畅言的后台找到安装方式，畅言应该提供了下述两个代码，你可以从其中找到你的 APPID 和 CONF：(function(){var appid = '{这个就是你的 APPID}';var conf = '{这个就是你的 CONF}';var width = window.innerWidth || document.documentElement.clientWidth;if (width '); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(\"head\")[0]||document.head||document.documentElement;var b=document.createElement(\"script\");b.setAttribute(\"type\",\"text/javascript\");b.setAttribute(\"charset\",\"UTF-8\");b.setAttribute(\"src\",d);if(typeof a===\"function\"){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===\"loaded\"||e===\"complete\"){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(\"\",function(){window.changyan.api.config({appid:appid,conf:conf})}); } })();请注意，搜狐畅言提供两种文章的区分方式，id 和 path（文章目录）。虽然在每次执行 hexo g 时每一篇文章都会被赋予一个 page.id 变量，但不唯一（该 id 和文章的对应关系存放在 Hexo Database 中，每次 hexo clean 时 Database 会被删除），所以如果使用 id 区分文章，你需要在每篇文章的 Front-Matter 中手动添加 id。所以我们推荐使用 path，除非你的站点的文章链接经常变动。来必力 (livere)「Suka」主题内置了 city_version 的来必力，该版本的来必力是免费的。comment:  use: livere  ......  livere:    data_uid: # 你的来必力 UID，可以在来必力后台获取Gitment | Gitalk:  use: gitalk # 或者 gitment  ......  gitment:    repo: # 存放评论的 issue 所在的 repo    owner: # 持有该 repo 的 GitHub user    client_id: # GitHub Client ID    client_secret: # GitHub Client Secret  gitalk:    repo: # 存放评论的 issue 所在的 repo    owner: # 持有该 repo 的 GitHub user    client_id: # GitHub Client ID    client_secret: # GitHub Client Secret请仔细阅读两种评论系统的文档、教程，以知晓如何启用、上述参数。一般的，你需要 创建一个新的 GitHub ApplicationValine:  use: valine  ......  valine:    leancloud_appId: # leancloud application app id    leancloud_appKey: # leancloud application app key    notify: false # valine mail notify (true/false)     verify: false # valine verify code (true/false)    pageSize: 10 # comment list page size    avatar: identicon # gravatar style     lang: zh-cn # i18n    placeholder: Just go go # valine comment input placeholder(like: Please leave your footprints )    guest_info: nick,mail,link #valine comment header info请仔细阅读 Valine 的文档 以知晓如何启用、填充上述上述参数。一般的，你需要一个 LeanCloud 的账号。WildFire:  use: wildfire  ......  wildfire:    database_provider: firebase # firebase or wilddog    wilddog_site_id:    firebase_api_key:    firebase_auth_domain:    firebase_database_url:    firebase_project_id:    firebase_storage_bucket:    firebase_messaging_sender_id:    theme: light # light or dark    locale: en # en or zh-CN请仔细阅读 WildFire 的文档 以知晓如何启用、填充上述上述参数。Facebook:  use: facebook  facebook:    colorschme: light # light | dark    numposts: 10    orderby: social # social | reverse_time | time    # You can only fill in one of them below when configuring.    # If you fill in both of them then appid method will be used.    # Read facebook developer documents for more info:    #     admin_fb_appid:    admin_fb_username: # Currently \"Suka\" don't support more than one admin. You can open a new issue if you really need one.请仔细阅读 Facebook Comment Social Plugin 以知晓如何启用、填充上述上述参数。站点访问统计analytics:  google_site_id:  gtags_site_id:  baidu_site_id:  cnzz_site_id:上面分别对应四种站点访问统计方式：Google 传统的 analytics.js 统计方式Google 新的 Tag Manager 统计方式。这种方式需要加载更大更多的文件。百度统计CNZZ 统计Google登陆 Google Analytics 管理后台，找到你的站点 - 媒体资源设置，找到 跟踪 ID，一般是以 UA- 开头。根据你想使用的方式，将 跟踪 ID 填写到 google_site_id 或 gtags_site_id 中。百度统计登陆百度统计后台，定位到代码获取页面，应该会提供类似如下形式的代码：    var _hmt = _hmt || [];    (function() {var hm = document.createElement('script');    hm.src = '?{这一长串就是你的 ID}';    var s = document.getElementsByTagName('script')[0];        s.parentNode.insertBefore(hm, s);    })();把那一长串 ID 设置在 baidu_site_id 中。CNZZCNZZ 已经被友盟（阿里）收购，下面是最新的官网地址登陆 CNZZ 后台，找到代码安装页面，应该会提供类似如下形式的代码：&amp;web_id={你的站点 ID}\" language=\"JavaScript\">把那一长串 ID 设置在 cnzz_site_id 中。默认脚本生成的内容会产生“站长统计”几个字，「Suka」将其隐藏了起来。腾讯分析腾讯已不再维护该服务，推荐使用腾讯移动分析登录腾讯分析控制台，登录并获取分析的 ID，填入 tencent_site_id 中。腾讯移动分析登录腾讯分析控制台，登录并获取 tencent_mta 的 ID，填入 tencent_mta_id 中。不蒜子: 是否启用不蒜子计数site_uv: 站点访客统计enable: 是否在页面上展示站点访客统计数目before: 统计数目之前显示的内容，支持 HTML，如果你不需要的话可以直接留空配置after: 统计数目之前显示的内容，支持 HTML，如果你不需要的话可以直接留空配置divider: 站点访客统计展示 与 之后的内容之间的分隔符，支持 HTML，如果你不需要的话可以直接留空配置offset: 设置 不蒜子 的偏移量（如果你不知道这是干什么用的就保持为 0）site_pv: 站点访问次数统计enable: 是否在页面上展示站点访问次数数目before: 统计数目之前显示的内容，支持 HTML，如果你不需要的话可以直接留空配置after: 统计数目之前显示的内容，支持 HTML，如果你不需要的话可以直接留空配置divider: 站点访问次数展示 与 之后的内容之间的分隔符，支持 HTML，如果你不需要的话可以直接留空配置offset: 设置 不蒜子 的偏移量（如果你不知道这是干什么用的就保持为 0）post_pv: 每篇文章的访问次数统计enable: 是否在文章页面上展示页面访问次数数目before: 统计数目之前显示的内容，支持 HTML，如果你不需要的话可以直接留空配置after: 统计数目之前显示的内容，支持 HTML，如果你不需要的话可以直接留空配置如果你同时将 site_uv.enable site_pv.enable post_pv.enable 设置为 false，不蒜子将仅作记录而不会在页面上显示。你可以使用在 before after 中使用 HTML Tag，比如用 &lt;br&gt; 换行。每个页面的不蒜子偏移量请在页面的 front-matter 中设置，详见 开始创作 - Front Matter。Valine 计数器（实验性）这项功能必须搭配 valine 评论系统使用enable: 是否启用 valine 计数site_pv: 站点访问次数统计enable: 是否在页面上展示站点访问次数数目before: 统计数目之前显示的内容，支持 HTML，如果你不需要的话可以直接留空配置after: 统计数目之前显示的内容，支持 HTML，如果你不需要的话可以直接留空配置divider: 站点访问次数展示 与 之后的内容之间的分隔符，支持 HTML，如果你不需要的话可以直接留空配置index_post_pv: 在文章列表页面展示每篇文章的访问次数enable: 是否在文章列表页面展示每篇文章的访问次数before: 统计数目之前显示的内容，支持 HTML，如果你不需要的话可以直接留空配置after: 统计数目之前显示的内容，支持 HTML，如果你不需要的话可以直接留空配置post_pv: 每篇文章的访问次数统计enable: 是否在文章页面上展示页面访问次数数目before: 统计数目之前显示的内容，支持 HTML，如果你不需要的话可以直接留空配置after: 统计数目之前显示的内容，支持 HTML，如果你不需要的话可以直接留空配置"},{"title":"HTML","date":"2019-03-12T04:51:12.606Z","url":"/mabu-code-guide//frontend/HTML/index.html","content":"1、语法缩进使用soft table（4个空格）；嵌套的节点应该缩进；在属性上，使用双引号，不要使用单引号；属性名全小写，用中划线做分隔符；不要在自动闭合标签结尾处使用斜线（HTML5 规范 指出他们是可选的）；不要忽略可选的关闭标签，例&lt;li&gt;和&lt;/body&gt;；&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt;     &lt;title&gt;Page Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     &lt;img src=&quot;images/company_logo.png&quot; alt=&quot;Company&quot;&gt;     &lt;h1 class=&quot;hello-world&quot;&gt;Hello World!&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt;2、HTML5 doctype在页面开头使用这个简单地doctype来启用标准模式，使其在每个浏览器中尽可能一致的展现；虽然doctype不区分大小写，但是按照惯例，doctype大写（关于html属性，大写还是小写）；&lt;!DOCTYPE html&gt;&lt;html&gt;    ...&lt;/html&gt;3、lang 属性根据HTML5 规范：应在HTML5标签上加上lang属性，这会给语音工具和翻译工具有帮助，告诉它们应当怎么去发音和翻译。更多关于lang属性的说明在这里。在sitepoint上可以查到语言列表。但sitepoint只是给出了语言的大类，例如中文只给出了zh，但是没有区分香港、台湾、大陆。而微软给出了一份更加详细的语言列表，其中细分了zh-cn，zh-hk，zh-tw。&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en-us&quot;&gt;    ...&lt;/html&gt;4、字符编码通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定位UTF-8。&lt;!DOCTYPEL html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;/head&gt;    ...&lt;/html&gt;5、IE 兼容模式用&lt;meta&gt;标签可以指定页面应该用什么版本的IE来渲染。如果想了解更多，请点击这里。不同的doctype在不同的浏览器下会触发不同的渲染模式（这篇文章总结的很到位）。&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;    &lt;/head&gt;    ...&lt;/html&gt;6、引入CSS，JS根据HTML5规范，通常在引入CSS和JS时不需要指明type，因为text/css和type/javascript分别是他们的默认值。HTML5 规范链接：使用 link使用 style使用 script&lt;!-- External CSS --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;code_guide.css&quot;&gt;&lt;!-- In-document CSS --&gt;&lt;style&gt;    ...&lt;/style&gt;&lt;!-- External JS --&gt;&lt;script src=&quot;code_guide.js&quot;&gt;&lt;/script&gt;&lt;!-- In-document JS --&gt;&lt;script&gt;    ...&lt;/script&gt;7、属性顺序属于应该按照特定的顺序出现以保证易读性；classidnamedata-*src、for、type、href、value、max-length、max、min、patternplaceholder、title、altaria-*、rolerequired、readonly、disabledclass是为高可复用组件设计的，所以应该处在第一位；id更加具体且应该尽量少的使用，所以放在第二位；&lt;a class=&quot;...&quot; id=&quot;...&quot; data-modal=&quot;toggle&quot; href=&quot;#&quot;&gt;Example link&lt;/a&gt;&lt;input class=&quot;form-control&quot; type=&quot;text&quot;&gt;&lt;img src=&quot;...&quot; alt=&quot;...&quot;&gt;8、boolean 属性boolean 属性指不需要声明取值的属性，XHTML需要每个属性声明取值，但是HTML5并不需要；更多内容可以参考WhatWG section on boolean attributes：boolean 属性的存在表示取值为true，不存在则表示取值为false。`    1#### 9、JS 生成便签在JS文件中生成标签会让内容变得更难查找，更难编辑，性能更差，应该尽量避免这种情况的出现。#### 10、减少标签数量在编辑HTML代码时，需要尽量避免多余的父节点；很多时候，需要通过迭代和重构来使HTML变得更少。    `11、实用高于完美尽量遵循HTML标准和语义，但是不应该以浪费实用性为代价；任何时候都要用尽量小的复杂度和尽量少的标签来解决问题。相关资料：Code Guide by @AlloyTeam"},{"title":"命名规则","date":"2019-03-12T04:51:12.606Z","url":"/mabu-code-guide//frontend/namingRules/index.html","content":"1、项目命名全部采用小写方式，以下划线分割。例：my_project_name2、目录命名参照项目命名规则，有复数结构时，要采用复数命名法。例：scripts , styles , images , data_models3、JS 文件命名参照项目命名规则。例：acount_model.js4、CSS，SCSS 文件命名参照项目命名规则。例：retina_sprites.scss5、HTML 文件命名参照项目命名规则。例：error_report.html相关资料：Code Guide by @AlloyTeam"},{"title":"git规范","date":"2019-03-12T06:03:14.751Z","url":"/mabu-code-guide//gitend/git/index.html","content":"分支命名分支对于一个团队或者用户来说起到标识和版本控制的作用。BRANCH自己的分支使用 项目名称 + 下划线 + 名字缩写 或者 名字缩写 命名举例： hdm_xg / xg注意： 均使用小写 特殊分支特殊分支的命名需要根据项目来定。TAG使用 tag 完成版本控制。大家可以注意到，一般的项目版本格式是 1.0.0-release 这样，简要说明一下版本的格式以 1.0.0 举例:第一位数表示项目大版本，只有出现大的功能型变更才会变更第一位数第二位数表示小功能的变更，增加或修订了重大bug可以变更第二位数第三位数表示功能的修复，一般一段时间修复了若干bug才会变更第三位数我们一般提供 release 和 snapshot 两个大版本release 用于发布正式版，一般用于没有明显bug的版本snapshot 用于发布快速测试版，一般用于新功能发布测试我们尽量参考 Linux 的发布模式，正式版用偶数的形式发出提交使用 git 进行提交时，要遵循如下规范:git 完成一个正常的提交应该有如下操作应用端简要查看此次修改的内容一键拉取最新代码编写 commit请求 merge 到 主分支使用命令端提交(建议配合 github desktop 使用)git status (简要查看此次修改的内容)git add . (增加此次提交的全部内容，也可以分批次 add)git commit -m &quot;commit描述&quot; (增加此次提交的描述)git pull origin master (拉取最新代码，此操作根据具体项目操作)git push origin xxx (提交到自己的分支上去)请求 merge 到 主分支Commit 规范在 git commit 时，需要添加针对本次提交的描述，描述应该包括此次提交的动作 + 空格 + 一小段描述，详细提交动作如下:常用[ADD]新增某个功能时使用举例： git commit -m &quot;[ADD] 新增消息推送功能&quot; [IMP]基于现有的功能完成优化、修改时使用。举例： git commit -m &quot;[IMP] 优化消息同步功能&quot; [FIX]修复某块 BUG 时使用。举例： git commit -m &quot;[FIX] 修复消息无法持久的bug&quot; 不常用[INIT]初始化某个项目、模块时使用。举例： git commit -m &quot;[INIT] 初始化kafka模块&quot; [REM]删除项目不再需要的文件或模块时使用。举例： git commit -m &quot;[REM] 移除消息推送中不再使用的方法&quot; [REF]重构项目中某块功能或模块时使用。举例： git commit -m &quot;[REF] 重构消息消费模块&quot; 合并主分支依据不同项目，前面的步骤过后，需要将代码合并至主分支(此时代码还在自己的分支)，发起合并请求后，在描述区域写清楚此次提交全部变动，不管是给代码合并者，或是所有人一个预览的作用。举例：    1. 新增消息推送功能(StartMQ)    2. 修复用户管理刷新的bug    3. 优化部分代码(用户模块、消息模块)    4. 修改数据库初始化文件请注意在 1. 后面增加空格 ， 这样 git 会自动识别格式。我们一般将数据库相关的变动放在结尾，书写顺序按照 初始化 -&gt; 重构 -&gt; 代码(新增、修改、删除) -&gt; 代码优化 -&gt; 代码移除 -&gt; 数据库信息 的顺序书写。"},{"title":"CSS SCSS","date":"2019-03-12T05:02:52.681Z","url":"/mabu-code-guide//frontend/CSS_SCSS/index.html","content":"1、缩进使用soft table（4个空格）。.element{    position: absolution;    top: 10px;    left: 10px;    border-radius: 10px;    width: 50px;    height:50px;}2、分号每个属性声明末位都要加分号。.element{    width: 20px;    height: 20px;    background-color: red;}3、空格以下几种情况不需要空格：属性名后；多个规则的分隔符,前；!important的!后面；属性值中(后和)前；行末不要有多余的空格；以下几种情况需要空格：属性值前；选择器&gt;,+,~前后；{前后；!important的!之前；@else 前后；属性值中的,后；注释/*之后和*/之前；/* not good */.element {    color :red! important;    background-color: rgba(0,0,0,.5);}/* good */.element {    color: red !important;    background-color: rgba(0, 0, 0, .5);}/* not good */.element ,.dialog{    ...}/* good */.element,.dialog {}/* not good */.element&gt;.dialog{    ...}/* good */.element &gt; .dialog{    ...}/* not good */.element{    ...}/* good */.element {    ...}/* not good */@if{    ...}@else{    ...}/* good */@if {    ...} @else {    ...}4、空行以下几种情况需要换行：文件最后保留一个空行；}后最好跟一个空行，包括scss中嵌套的规则；属性之间需要适当的空行，具体见【9、属性声明顺序】；`/ not good /.element { …}.dialog { color: red; &amp;:after { ... }}/ good /.element {    …}.dialog {    color: red;&amp;:after {    ...}}#### 5、换行 - 以下几种情况不需要换行：    - `{`前； - 以下几种情况需要换行：    - `{`后和`}`前；    - 每个属性独占一行；    - 多个规则的分隔符`,`后；/ not good /.element{color: red; background-color: black;}/ good /.element {    color: red;    background-color: black;}/ not good /.element, .dialog {    …}/ good /.element,.dialog {    …}#### 6、注释注释统一用`/* */`（scss中也不要用`//`），具体参照下面的写法；缩进与下一行代码保持一致；可位于一个代码行的末尾，与代码间隔一个空格。 / Modal header /.modal-header {    …}/*Modal header*/.modal-header { …}.modal-header {    / 50px /    width: 50px;color: red; /* color red */}#### 7、引号最外层统一使用双引号；url的内容要使用引号；属性选择器中的属性值需要引导；.element:after {    content: “”;    background-image: url(“logo.png”);}li[data-type=”single”] {    …}#### 8、命名 - 类名使用小写字母，以中划线分隔； - id采用驼峰式命名； - scss中的变量、函数、混合、placeholder采用驼峰式命名/ class /.element-content {    …}/ id /#myDialog {    …}/ 变量 /$colorBlack: #000;/ 函数 /@function pxToRem($px) {    …}/ 混合 /@mixin centerBlock {    …}/ placeholder /%myDialog {    …}#### 9、属性声明顺序相关的属性声明按下面的顺序做分组处理，组之间需要有一个空行。.declaration-order {    display: block;    float: right;position: absolute;top: 0;right: 0;bottom: 0;left: 0;z-index: 100;border: 1px solid #e5e5e5;border-radius: 3px;width: 100px;height: 100px;font: normal 13px &quot;Helvetica Neue&quot;, sans-serif;line-height: 1.5;text-align: center;color: #333;background-color: #f5f5f5;opacity: 1;}// 下面是推荐的属性的顺序[    [        “display”,        “visibility”,        “float”,        “clear”,        “overflow”,        “overflow-x”,        “overflow-y”,        “clip”,        “zoom”    ],    [        “table-layout”,        “empty-cells”,        “caption-side”,        “border-spacing”,        “border-collapse”,        “list-style”,        “list-style-position”,        “list-style-type”,        “list-style-image”    ],    [        “-webkit-box-orient”,        “-webkit-box-direction”,        “-webkit-box-decoration-break”,        “-webkit-box-pack”,        “-webkit-box-align”,        “-webkit-box-flex”    ],    [        “position”,        “top”,        “right”,        “bottom”,        “left”,        “z-index”    ],    [        “margin”,        “margin-top”,        “margin-right”,        “margin-bottom”,        “margin-left”,        “-webkit-box-sizing”,        “-moz-box-sizing”,        “box-sizing”,        “border”,        “border-width”,        “border-style”,        “border-color”,        “border-top”,        “border-top-width”,        “border-top-style”,        “border-top-color”,        “border-right”,        “border-right-width”,        “border-right-style”,        “border-right-color”,        “border-bottom”,        “border-bottom-width”,        “border-bottom-style”,        “border-bottom-color”,        “border-left”,        “border-left-width”,        “border-left-style”,        “border-left-color”,        “-webkit-border-radius”,        “-moz-border-radius”,        “border-radius”,        “-webkit-border-top-left-radius”,        “-moz-border-radius-topleft”,        “border-top-left-radius”,        “-webkit-border-top-right-radius”,        “-moz-border-radius-topright”,        “border-top-right-radius”,        “-webkit-border-bottom-right-radius”,        “-moz-border-radius-bottomright”,        “border-bottom-right-radius”,        “-webkit-border-bottom-left-radius”,        “-moz-border-radius-bottomleft”,        “border-bottom-left-radius”,        “-webkit-border-image”,        “-moz-border-image”,        “-o-border-image”,        “border-image”,        “-webkit-border-image-source”,        “-moz-border-image-source”,        “-o-border-image-source”,        “border-image-source”,        “-webkit-border-image-slice”,        “-moz-border-image-slice”,        “-o-border-image-slice”,        “border-image-slice”,        “-webkit-border-image-width”,        “-moz-border-image-width”,        “-o-border-image-width”,        “border-image-width”,        “-webkit-border-image-outset”,        “-moz-border-image-outset”,        “-o-border-image-outset”,        “border-image-outset”,        “-webkit-border-image-repeat”,        “-moz-border-image-repeat”,        “-o-border-image-repeat”,        “border-image-repeat”,        “padding”,        “padding-top”,        “padding-right”,        “padding-bottom”,        “padding-left”,        “width”,        “min-width”,        “max-width”,        “height”,        “min-height”,        “max-height”    ],    [        “font”,        “font-family”,        “font-size”,        “font-weight”,        “font-style”,        “font-variant”,        “font-size-adjust”,        “font-stretch”,        “font-effect”,        “font-emphasize”,        “font-emphasize-position”,        “font-emphasize-style”,        “font-smooth”,        “line-height”,        “text-align”,        “-webkit-text-align-last”,        “-moz-text-align-last”,        “-ms-text-align-last”,        “text-align-last”,        “vertical-align”,        “white-space”,        “text-decoration”,        “text-emphasis”,        “text-emphasis-color”,        “text-emphasis-style”,        “text-emphasis-position”,        “text-indent”,        “-ms-text-justify”,        “text-justify”,        “letter-spacing”,        “word-spacing”,        “-ms-writing-mode”,        “text-outline”,        “text-transform”,        “text-wrap”,        “-ms-text-overflow”,        “text-overflow”,        “text-overflow-ellipsis”,        “text-overflow-mode”,        “-ms-word-wrap”,        “word-wrap”,        “-ms-word-break”,        “word-break”    ],    [        “color”,        “background”,        “filter:progid:DXImageTransform.Microsoft.AlphaImageLoader”,        “background-color”,        “background-image”,        “background-repeat”,        “background-attachment”,        “background-position”,        “-ms-background-position-x”,        “background-position-x”,        “-ms-background-position-y”,        “background-position-y”,        “-webkit-background-clip”,        “-moz-background-clip”,        “background-clip”,        “background-origin”,        “-webkit-background-size”,        “-moz-background-size”,        “-o-background-size”,        “background-size”    ],    [        “outline”,        “outline-width”,        “outline-style”,        “outline-color”,        “outline-offset”,        “opacity”,        “filter:progid:DXImageTransform.Microsoft.Alpha(Opacity”,        “-ms-filter:\\‘progid:DXImageTransform.Microsoft.Alpha”,        “-ms-interpolation-mode”,        “-webkit-box-shadow”,        “-moz-box-shadow”,        “box-shadow”,        “filter:progid:DXImageTransform.Microsoft.gradient”,        “-ms-filter:\\‘progid:DXImageTransform.Microsoft.gradient”,        “text-shadow”    ],    [        “-webkit-transition”,        “-moz-transition”,        “-ms-transition”,        “-o-transition”,        “transition”,        “-webkit-transition-delay”,        “-moz-transition-delay”,        “-ms-transition-delay”,        “-o-transition-delay”,        “transition-delay”,        “-webkit-transition-timing-function”,        “-moz-transition-timing-function”,        “-ms-transition-timing-function”,        “-o-transition-timing-function”,        “transition-timing-function”,        “-webkit-transition-duration”,        “-moz-transition-duration”,        “-ms-transition-duration”,        “-o-transition-duration”,        “transition-duration”,        “-webkit-transition-property”,        “-moz-transition-property”,        “-ms-transition-property”,        “-o-transition-property”,        “transition-property”,        “-webkit-transform”,        “-moz-transform”,        “-ms-transform”,        “-o-transform”,        “transform”,        “-webkit-transform-origin”,        “-moz-transform-origin”,        “-ms-transform-origin”,        “-o-transform-origin”,        “transform-origin”,        “-webkit-animation”,        “-moz-animation”,        “-ms-animation”,        “-o-animation”,        “animation”,        “-webkit-animation-name”,        “-moz-animation-name”,        “-ms-animation-name”,        “-o-animation-name”,        “animation-name”,        “-webkit-animation-duration”,        “-moz-animation-duration”,        “-ms-animation-duration”,        “-o-animation-duration”,        “animation-duration”,        “-webkit-animation-play-state”,        “-moz-animation-play-state”,        “-ms-animation-play-state”,        “-o-animation-play-state”,        “animation-play-state”,        “-webkit-animation-timing-function”,        “-moz-animation-timing-function”,        “-ms-animation-timing-function”,        “-o-animation-timing-function”,        “animation-timing-function”,        “-webkit-animation-delay”,        “-moz-animation-delay”,        “-ms-animation-delay”,        “-o-animation-delay”,        “animation-delay”,        “-webkit-animation-iteration-count”,        “-moz-animation-iteration-count”,        “-ms-animation-iteration-count”,        “-o-animation-iteration-count”,        “animation-iteration-count”,        “-webkit-animation-direction”,        “-moz-animation-direction”,        “-ms-animation-direction”,        “-o-animation-direction”,        “animation-direction”    ],    [        “content”,        “quotes”,        “counter-reset”,        “counter-increment”,        “resize”,        “cursor”,        “-webkit-user-select”,        “-moz-user-select”,        “-ms-user-select”,        “user-select”,        “nav-index”,        “nav-up”,        “nav-right”,        “nav-down”,        “nav-left”,        “-moz-tab-size”,        “-o-tab-size”,        “tab-size”,        “-webkit-hyphens”,        “-moz-hyphens”,        “hyphens”,        “pointer-events”    ]]#### 10、颜色颜色16进制用小写字母；颜色16进制尽量用简写。/ not good /.element {    color: #ABCDEF;    background-color: #001122;}/ good /.element {    color: #abcdef;    background-color: #012;}#### 11、属性简写属性简写需要你非常清楚属性值的正确顺序，而且在大多数情况下并不需要设置属性简写中包含的所有值，所以建议尽量分开声明会更加清晰；`margin` 和 `padding` 相反，需要使用简写；常见的属性简写包括： - `font` - `background` - `transition` - `animation`/ not good /.element {    transition: opacity 1s linear 2s;}/ good /.element {    transition-delay: 2s;    transition-timing-function: linear;    transition-duration: 1s;    transition-property: opacity;}#### 12、媒体查询尽量将媒体查询的规则靠近与他们相关的规则，不要将他们一起放到一个独立的样式文件中，或者丢在文档的最底部，这样做只会让大家以后更容易忘记他们。.element {    …}.element-avatar{    …}@media (min-width: 480px) {    .element {        …    }.element-avatar {    ...}}#### 13、SCSS相关提交的代码中不要有 `@debug`；声明顺序： - `@extend` - 不包含 `@content` 的 `@include` - 包含 `@content` 的 `@include` - 自身属性 - 嵌套规则`@import` 引入的文件不需要开头的`_`和结尾的`.scss`；嵌套最多不能超过5层；`@extend` 中使用placeholder选择器；去掉不必要的父级引用符号`&amp;`。/ not good /@import “_dialog.scss”;/ good /@import “dialog”;/ not good /.fatal {    @extend .error;}/ good /.fatal {    @extend %error;}/ not good /.element {    &amp; &gt; .dialog {        …    }}/ good /.element {    &gt; .dialog {        …    }}#### 14、杂项 - 不允许有空的规则； - 元素选择器用小写字母； - 去掉小数点前面的0； - 去掉数字中不必要的小数点和末尾的0； - 属性值&#39;0&#39;后面不要加单位； - 同个属性不同前缀的写法需要在垂直方向保持对齐，具体参照右边的写法； - 无前缀的标准属性应该写在有前缀的属性后面； - 不要在同个规则里出现重复的属性，如果重复的属性是连续的则没关系； - 不要在一个文件里出现两个相同的规则； - 用 `border: 0;` 代替 `border: none;`； - 选择器不要超过4层（在scss中如果超过4层应该考虑用嵌套的方式来写）； - 发布的代码中不要有 `@import`； - 尽量少用&#39;*&#39;选择器。/ not good /.element {}/ not good /LI {    …}/ good /li {    …}/ not good /.element {    color: rgba(0, 0, 0, 0.5);}/ good /.element {    color: rgba(0, 0, 0, .5);}/ not good /.element {    width: 50.0px;}/ good /.element {    width: 50px;}/ not good /.element {    width: 0px;}/ good /.element {    width: 0;}/ not good /.element {    border-radius: 3px;    -webkit-border-radius: 3px;    -moz-border-radius: 3px;background: linear-gradient(to bottom, #fff 0, #eee 100%);background: -webkit-linear-gradient(top, #fff 0, #eee 100%);background: -moz-linear-gradient(top, #fff 0, #eee 100%);}/ good /.element {    -webkit-border-radius: 3px;       -moz-border-radius: 3px;            border-radius: 3px;background: -webkit-linear-gradient(top, #fff 0, #eee 100%);background:    -moz-linear-gradient(top, #fff 0, #eee 100%);background:         linear-gradient(to bottom, #fff 0, #eee 100%);}/ not good /.element {    color: rgb(0, 0, 0);    width: 50px;    color: rgba(0, 0, 0, .5);}/ good /.element {    color: rgb(0, 0, 0);    color: rgba(0, 0, 0, .5);}`相关资料：Code Guide by @AlloyTeam"},{"title":"JavaScript","date":"2019-03-12T04:51:12.606Z","url":"/mabu-code-guide//frontend/JavaScript/index.html","content":"1、缩进使用soft tab（4个空格）。var x = 1,    y = 1;if (x &lt; y) {    x += 10;} else {    x += 1;}2、单位长度不要超过80，但如果编辑器开启word wrap可以不考虑单行长度。3、分号以下几种情况后需加分号：变量声明表达式returnthrowbreakcontinuedo-while`/ var declaration /var x = 1;/ expression statement /x++;/ do-while /do {    x++;} while (x &lt; 10);#### 4、空格 - 以下几种情况不需要空格：    - 对象的属性名后；    - 前缀一元运算符后；    - 后缀一元运算符前；    - 函数调用括号前；    - 无论是函数声明还是函数表达式，`(`前不要空格；    - 数组的`[`后和`]`前；    - 对象的`{`后和`}`前；    - 运算符`(`后和`)`前； - 以下几种情况需要空格：    - 二元运算符前后    - 三元运算符`?:`前后    - 代码块`{`前    - 下列关键字前：`else`, `while`, `catch`, `finally`；    - 下列关键字后：`if`, `else`, `for`, `while`, `do`, `switch`, `case`, `try`, `catch`, `finally`, `with`, `return`, `typeof`；    - 单行注释`//`后（若单行注释和代码同行，则`//`前也需要），多行注释`*`后    - 对象的属性值前    - for循环，分号后留有一个空格，前置条件如果有多个，逗号后留一个空格    无论是函数声明还是函数表达式，`{`前一定要有空格    - 函数的参数之间// not goodvar a = {    b :1};// goodvar a = {    b: 1};// not good++ x;y ++;z = x?1:2;// good++x;y++;z = x ? 1 : 2;// not goodvar a = [ 1, 2 ];// goodvar a = [1, 2];// not goodvar a = ( 1+2 )*3;// goodvar a = (1 + 2) * 3;// no space before ‘(‘, one space before ‘{‘, one space between function parametersvar doSomething = function(a, b, c) {    // do something};// no space before ‘(‘doSomething(item);// not goodfor(i=0;i&lt;6;i++){    x++;}// goodfor (i = 0; i &lt; 6; i++) {    x++;}#### 5、空行以下几种情况需要空行： - 变量声明后（当变量声明在代码块的最后一行时，则无需空行）； - 注释前（当注释在代码块的第一行时，则无需空行）； - 代码块后（在函数调用、数组、对象中则无需空行）； - 文件最后保留一个空行。// need blank line after variable declarationvar x = 1;// not need blank line when variable declaration is last expression in the current blockif (x &gt;= 1) {    var y = x + 1;}var a = 2;// need blank line before line commenta++;function b() {    // not need blank line when comment is first line of block    return a;}// need blank line after blocksfor (var i = 0; i &lt; 2; i++) {    if (true) {        return false;    }continue;}var obj = {    foo: function() {        return 1;    },bar: function() {    return 2;}};// not need blank line when in argument list, array, objectfunc(    2,    function() {        a++;    },    3);var foo = [    2,    function() {        a++;    },    3];var foo = {    a: 2,    b: function() {        a++;    },    c: 3};#### 6、换行换行的地方，行末必须有`,`或者运算符；以下几种情况不需要换行： - 下列关键字后：`else`, `catch`,` finally`； - 代码块`{`前；以下几种情况需要换行： - 代码块`{`后和`}`前； - 变量赋值后；// not goodvar a = {    b: 1    , c: 2};x = y    ? 1 : 2;// goodvar a = {    b: 1,    c: 2};x = y ? 1 : 2;x = y ?    1 : 2;// no need line break with ‘else’, ‘catch’, ‘finally’if (condition) {    …} else {    …}try {    …} catch (e) {    …} finally {    …}// not goodfunction test(){    …}// goodfunction test() {    …}// not goodvar a, foo = 7, b,    c, bar = 8;// goodvar a,    foo = 7,    b, c, bar = 8;#### 7、单行注释双斜线后，必须跟一个空格；缩进与下一行代码保持一致；可位于一个代码行的末尾，与代码间隔一个空格。 if (condition) {    // if you made it here, then all security checks passed    allowed();}var zhangsan = ‘zhangsan’; // one space after code#### 8、多行注释最少三行, `*`后跟一个空格，具体参照右边的写法；建议在以下情况下使用： - 难于理解的代码段； - 可能存在错误的代码段； - 浏览器特殊的HACK代码； - 业务逻辑强相关的代码/*one space after ‘‘/var x = 1;`9、文档注释各类标签@param, @method等请参考usejsdoc和JSDoc Guide；建议在以下情况下使用：所有常量；所有函数；所有类；`/**@func@desc 一个带参数的函数@param {string} a - 参数a@param {number} b=1 - 参数b默认值为1@param {string} c=1 - 参数c有两种支持的取值1—表示x2—表示xx@param {object} d - 参数d为一个对象@param {string} d.e - 参数d的e属性@param {string} d.f - 参数d的f属性@param {object[]} g - 参数g为一个对象数组@param {string} g.h - 参数g数组中一项的h属性@param {string} g.i - 参数g数组中一项的i属性@param {string} [j] - 参数j是一个可选参数*/function foo(a, b, c, d, g, j) { …}`10、引号最外层统一使用单引号。// not goodvar x = &quot;test&quot;;// goodvar y = &#39;foo&#39;,    z = &#39;&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;&#39;;11、变量命名标准变量采用驼峰式命名（除了对象的属性外，主要是考虑到cgi返回的数据）；‘ID’在变量名中全大写；‘URL’在变量名中全大写；‘Android’在变量名中大写第一个字母；‘iOS’在变量名中小写第一个，大写后两个字母；常量全大写，用下划线连接；构造函数，大写第一个字母；jquery对象必须以’$’开头命名；var thisIsMyName;var goodID;var reportURL;var AndroidVersion;var iOSVersion;var MAX_COUNT = 10;function Person(name) {    this.name = name;}// not goodvar body = $(&#39;body&#39;);// goodvar $body = $(&#39;body&#39;);12、变量声明一个函数作用域中所有的变量声明尽量提到函数首部，用一个var声明，不允许出现两个连续的var声明。function doSomethingWithItems(items) {    // use one var    var value = 10,        result = value + 10,        i,        len;    for (i = 0, len = items.length; i &lt; len; i++) {        result += 10;    }}13、函数无论是函数声明还是函数表达式，’(‘前不要空格，但’{‘前一定要有空格；函数调用括号前不需要空格；立即执行函数外必须包一层括号；不要给inline function命名；参数之间用’, ‘分隔，注意逗号后有一个空格。`// no space before ‘(‘, but one space before’{‘var doSomething = function(item) { // do something};function doSomething(item) {    // do something}// not gooddoSomething (item);// gooddoSomething(item);// requires parentheses around immediately invoked function expressions(function() {    return 1;})();// not good[1, 2].forEach(function x() {    …});// good[1, 2].forEach(function() {    …});// not goodvar a = [1, 2, function a() {    …}];// goodvar a = [1, 2, function() {    …}];// use ‘, ‘ between function parametersvar doSomething = function(a, b, c) {    // do something};#### 14、数组、对象对象属性名不需要加引号；对象以缩进的形式书写，不要写在一行；数组、对象最后不要有逗号。// not goodvar a = {    ‘b’: 1};var a = {b: 1};var a = {    b: 1,    c: 2,};// goodvar a = {    b: 1,    c: 2};#### 15、括号下列关键字后必须有大括号（即使代码块的内容只有一行）：`if`, `else`, `for`, `while`, `do`, `switch`, `try`, `catch`, `finally`, `with`。// not goodif (condition)    doSomething();// goodif (condition) {    doSomething();}#### 16、`null`适用场景： - 初始化一个将来可能被赋值为对象的变量； - 与已经初始化的变量做比较； - 作为一个参数为对象的函数的调用传参； - 作为一个返回对象的函数的返回值；不适用场景： - 不要用null来判断函数调用时有无传参； - 不要与未初始化的变量做比较；// not goodfunction test(a, b) {    if (b === null) {        // not mean b is not supply        …    }}var a;if (a === null) {    …}// goodvar a = null;if (a === null) {    …}#### 17、`undefined`永远不要直接使用`undefined`进行变量判断；使用`typeof`和字符串`undefined`对变量进行判断。// not goodif (person === undefined) {    …}// goodif (typeof person === ‘undefined’) {    …}#### 18、jshint - 用`===`, `!==`代替`==`, `!=`； - for-in里一定要有hasOwnProperty的判断； - 不要在内置对象的原型上添加方法，如`Array`, `Date`； - 不要在内层作用域的代码里声明了变量，之后却访问到了外层作用域的同名变量； - 变量不要先使用后声明； - 不要在一句代码中单单使用构造函数，记得将其赋值给某个变量； - 不要在同个作用域下声明同名变量； - 不要在一些不需要的地方加括号，例：`delete(a.b)`； - 不要使用未声明的变量（全局变量需要加到`.jshintrc`文件的`globals`属性里面）； - 不要声明了变量却不使用； - 不要在应该做比较的地方做赋值； - `debugger`不要出现在提交的代码里； - 数组中不要存在空元素； - 不要在循环内部声明函数； - 不要像这样使用构造函数，例：`new function () { ... }`, `new Object`；// not goodif (a == 1) {    a++;}// goodif (a === 1) {    a++;}// goodfor (key in obj) {    if (obj.hasOwnProperty(key)) {        // be sure that obj[key] belongs to the object and was not inherited        console.log(obj[key]);    }}// not goodArray.prototype.count = function(value) {    return 4;};// not goodvar x = 1;function test() {    if (true) {        var x = 0;    }x += 1;}// not goodfunction test() {    console.log(x);var x = 1;}// not goodnew Person();// goodvar person = new Person();// not gooddelete(obj.attr);// gooddelete obj.attr;// not goodif (a = 10) {    a++;}// not goodvar a = [1, , , 2, 3];// not goodvar nums = [];for (var i = 0; i &lt; 10; i++) {    (function(i) {        nums[i] = function(j) {            return i + j;        };    }(i));}// not goodvar singleton = new function() {    var privateVar;this.publicMethod = function() {    privateVar = 1;};this.publicMethod2 = function() {    privateVar = 2;};};#### 19、杂项 - 不要混用tab和space； - 不要在一处使用多个tab或space； - 换行符统一用`LF`； - 对上下文this的引用只能使用`_this`, `that`, `self`其中一个来命名； - 行尾不要有空白字符； - `switch`的`falling through`和`no default`的情况一定要有注释特别说明； - 不允许有空的代码块。// not goodvar a   = 1;function Person() {    // not good    var me = this;// goodvar _this = this;// goodvar that = this;// goodvar self = this;}// goodswitch (condition) {    case 1:    case 2:        …        break;    case 3:        …    // why fall through    case 4        …        break;    // why no default}// not good with empty blockif (condition) {}`相关资料：Code Guide by @AlloyTeam"}]